name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies on Linux
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libx11-dev mesa-common-dev libglu1-mesa-dev libxi-dev libxmu-dev libxmu-headers
        sudo apt-get install -y libncurses-dev libtirpc-dev
        sudo apt-get install -y bison flex
        sudo apt-get install -y ninja-build

    - name: Install PowerShell on Linux
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: Set reusable strings
      id: strings
      shell: pwsh
      run: |
        $buildOutputDir = "${{ github.workspace }}/build"
        echo "build-output-dir=$buildOutputDir" >> $env:GITHUB_OUTPUT

    - name: Bootstrap vcpkg on Windows
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (-not (Test-Path -Path "vcpkg")) {
            git clone https://github.com/microsoft/vcpkg.git vcpkg
            cd vcpkg
            .\bootstrap-vcpkg.bat -disableMetrics
            .\vcpkg integrate install
        }

    - name: Bootstrap vcpkg on Linux
      if: matrix.os == 'ubuntu-latest'
      shell: pwsh
      run: |
        if (-not (Test-Path -Path "vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git vcpkg
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
        }

    - name: Set VCPKG_ROOT environment variable
      shell: pwsh
      run: |
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $env:GITHUB_ENV
        echo "VCPKG_FEATURE_FLAGS=versions" >> $env:GITHUB_ENV

    - name: Add cl To Path
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        if (-not (Test-Path -Path $vswherePath)) {
        echo "vswhere.exe not found. Visual Studio may not be installed correctly."
          exit 1
        }
        $vsInstallPath = & $vswherePath -latest -property installationPath
        $vcvarsallPath = Join-Path -Path $vsInstallPath -ChildPath "\VC\Auxiliary\Build\vcvarsall.bat"
        if (-not (Test-Path -Path $vcvarsallPath)) {
          echo "vcvarsall.bat not found. Visual Studio may not be installed correctly."
          exit 1
        }
        # Run vcvarsall.bat and capture the modified environment variables
        $envVars = cmd /c "`"$vcvarsallPath`" x64 & set"
        # Split the output into individual environment variable assignments
        $envVars -split "`n" | ForEach-Object {
          if ($_ -match "^(.*?)=(.*)$") {
            [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
          }
        }
        echo "MSVC Compiler version:"
        cl /?
        if ($LASTEXITCODE -ne 0) { exit 1 }

    - name: Test Tools Windows
      if: matrix.os == 'windows-latest'
      run: |
        $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        if (-not (Test-Path -Path $vswherePath)) {
        echo "vswhere.exe not found. Visual Studio may not be installed correctly."
          exit 1
        }
        $vsInstallPath = & $vswherePath -latest -property installationPath
        $vcvarsallPath = Join-Path -Path $vsInstallPath -ChildPath "\VC\Auxiliary\Build\vcvarsall.bat"
        if (-not (Test-Path -Path $vcvarsallPath)) {
          echo "vcvarsall.bat not found. Visual Studio may not be installed correctly."
          exit 1
        }
        # Run vcvarsall.bat and capture the modified environment variables
        $envVars = cmd /c "`"$vcvarsallPath`" x64 & set"
        # Split the output into individual environment variable assignments
        $envVars -split "`n" | ForEach-Object {
          if ($_ -match "^(.*?)=(.*)$") {
            [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
          }
        }
        echo "MSVC Compiler version:"
        cl /?
        if ($LASTEXITCODE -ne 0) { exit 1 }
        echo "Testing tools on Windows..."
        if (-not (Test-Path -Path "${{ env.VCPKG_ROOT }}")) {
          echo "VCPKG_ROOT is not set or the path does not exist"
        } else {
        echo "VCPKG_ROOT: ${{ env.VCPKG_ROOT }}"
        }
        echo "CMake version:"
        cmake --version
        if ($LASTEXITCODE -ne 0) { exit 1 }
        echo "MSVC Compiler version:"
        cl /?
        if ($LASTEXITCODE -ne 0) { exit 1 }
        echo "Ninja version:"
        ninja --version
        if ($LASTEXITCODE -ne 0) { exit 1 }

    - name: Test Tools Linux
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        echo "Testing tools on Linux..."
        if [ -z "${{ env.VCPKG_ROOT }}" ]; then
          echo "VCPKG_ROOT is not set"
        else
          echo "VCPKG_ROOT: ${{ env.VCPKG_ROOT }}"
        fi
        echo "CMake version:"
        cmake --version || exit 1
        echo "GCC version:"
        gcc --version || exit 1
        echo "G++ version:"
        g++ --version || exit 1
        echo "Ninja version:"
        ninja --version || exit 1


    - name: Configure CMake With Vcpkg Toolchain on Windows
      if: matrix.os == 'windows-latest'
      run: |
        $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        if (-not (Test-Path -Path $vswherePath)) {
        echo "vswhere.exe not found. Visual Studio may not be installed correctly."
          exit 1
        }
        $vsInstallPath = & $vswherePath -latest -property installationPath
        $vcvarsallPath = Join-Path -Path $vsInstallPath -ChildPath "\VC\Auxiliary\Build\vcvarsall.bat"
        if (-not (Test-Path -Path $vcvarsallPath)) {
          echo "vcvarsall.bat not found. Visual Studio may not be installed correctly."
          exit 1
        }
        # Run vcvarsall.bat and capture the modified environment variables
        $envVars = cmd /c "`"$vcvarsallPath`" x64 & set"
        # Split the output into individual environment variable assignments
        $envVars -split "`n" | ForEach-Object {
          if ($_ -match "^(.*?)=(.*)$") {
            [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
          }
        }
        echo "MSVC Compiler version:"
        cl /?
        if ($LASTEXITCODE -ne 0) { exit 1 }
        echo "Configuring CMake with vcpkg toolchain..."
        cmake -B ${{ steps.strings.outputs.build-output-dir }} `
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
        -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake `
        -S ${{ github.workspace }} -G Ninja

    - name: Configure CMake With Vcpkg Toolchain on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "Configuring CMake with vcpkg toolchain..."
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
        -S ${{ github.workspace }} -G Ninja

    - name: Build Windows
      if: matrix.os == 'windows-latest'
      run: |
        $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        if (-not (Test-Path -Path $vswherePath)) {
        echo "vswhere.exe not found. Visual Studio may not be installed correctly."
          exit 1
        }
        $vsInstallPath = & $vswherePath -latest -property installationPath
        $vcvarsallPath = Join-Path -Path $vsInstallPath -ChildPath "\VC\Auxiliary\Build\vcvarsall.bat"
        if (-not (Test-Path -Path $vcvarsallPath)) {
          echo "vcvarsall.bat not found. Visual Studio may not be installed correctly."
          exit 1
        }
        # Run vcvarsall.bat and capture the modified environment variables
        $envVars = cmd /c "`"$vcvarsallPath`" x64 & set"
        # Split the output into individual environment variable assignments
        $envVars -split "`n" | ForEach-Object {
          if ($_ -match "^(.*?)=(.*)$") {
            [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
          }
        }
        echo "MSVC Compiler version:"
        cl /?
        if ($LASTEXITCODE -ne 0) { exit 1 }
        echo "Building project..."
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Build Linux
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        echo "Building project..."
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test Windows
      if: matrix.os == 'windows-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}/tests
      run: |
        $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        if (-not (Test-Path -Path $vswherePath)) {
        echo "vswhere.exe not found. Visual Studio may not be installed correctly."
          exit 1
        }
        $vsInstallPath = & $vswherePath -latest -property installationPath
        $vcvarsallPath = Join-Path -Path $vsInstallPath -ChildPath "\VC\Auxiliary\Build\vcvarsall.bat"
        if (-not (Test-Path -Path $vcvarsallPath)) {
          echo "vcvarsall.bat not found. Visual Studio may not be installed correctly."
          exit 1
        }
        # Run vcvarsall.bat and capture the modified environment variables
        $envVars = cmd /c "`"$vcvarsallPath`" x64 & set"
        # Split the output into individual environment variable assignments
        $envVars -split "`n" | ForEach-Object {
          if ($_ -match "^(.*?)=(.*)$") {
            [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
          }
        }
        echo "MSVC Compiler version:"
        cl /?
        if ($LASTEXITCODE -ne 0) { exit 1 }
        echo "Running tests..."
        ctest --build-config ${{ matrix.build_type }}
      continue-on-error: true

    - name: Test Linux
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      working-directory: ${{ steps.strings.outputs.build-output-dir }}/tests
      run: |
        echo "Running tests..."
        ctest --build-config ${{ matrix.build_type }}
      continue-on-error: true

  build-android:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Install Java (for sdkmanager)
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-11-jdk wget unzip
        sudo apt-get install -y ninja-build

    - name: Install Android NDK (r27d)
      run: |
        mkdir -p $HOME/android-sdk/ndk
        cd $HOME/android-sdk
        wget https://dl.google.com/android/repository/android-ndk-r27d-linux.zip -O ndk.zip
        unzip ndk.zip -d $HOME/android-sdk/ndk
        echo "ANDROID_NDK=$HOME/android-sdk/ndk/$(ls $HOME/android-sdk/ndk | tail -n1)" >> $GITHUB_ENV

    - name: Bootstrap vcpkg
      shell: bash
      run: |
        if [ ! -d "vcpkg" ]; then
          git clone https://github.com/microsoft/vcpkg.git vcpkg
          ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg/vcpkg integrate install
        fi

    - name: Set VCPKG_ROOT and Android env
      shell: bash
      run: |
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV
        echo "VCPKG_FEATURE_FLAGS=versions" >> $GITHUB_ENV
        echo "ANDROID_NDK=$HOME/android-sdk/ndk/$(ls $HOME/android-sdk/ndk | tail -n1)" >> $GITHUB_ENV

    - name: Configure CMake for Android (vcpkg chainload)
      shell: bash
      run: |
        echo "Configuring CMake for Android (arm64)"
        cmake -B build-android \
          -S . \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
          -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \
          -DVCPKG_TARGET_TRIPLET=arm64-android \
          -DANDROID_NDK=$ANDROID_NDK \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-21

    - name: Build Android
      shell: bash
      run: |
        cmake --build build-android --config Release
