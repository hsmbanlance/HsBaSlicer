name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install PowerShell on Linux
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https software-properties-common
        wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        rm packages-microsoft-prod.deb

    - name: Set reusable strings
      id: strings
      shell: pwsh
      run: |
        $buildOutputDir = "${{ github.workspace }}/build"
        echo "build-output-dir=$buildOutputDir" | Out-File -Encoding utf8 -FilePath $env:GITHUB_OUTPUT

    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: vcpkg
        key: vcpkg-${{ runner.os }}-${{ github.sha }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: Remove existing vcpkg directory if not cached
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        if (Test-Path -Path "vcpkg") {
            Remove-Item -Recurse -Force vcpkg
        }

    - name: Bootstrap vcpkg on Windows
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (-not (Test-Path -Path "vcpkg")) {
            git clone https://github.com/microsoft/vcpkg.git vcpkg
            cd vcpkg
            .\bootstrap-vcpkg.bat -disableMetrics
            .\vcpkg integrate install
        }

    - name: Bootstrap vcpkg on Linux
      if: matrix.os == 'ubuntu-latest'
      shell: pwsh
      run: |
        if (-not (Test-Path -Path "vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git vcpkg
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
        }

    - name: Set VCPKG_ROOT environment variable
      shell: pwsh
      run: |
        $env:VCPKG_ROOT = "${{ github.workspace }}/vcpkg"
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" | Out-File -Encoding utf8 -FilePath $env:GITHUB_ENV
        echo "VCPKG_FEATURE_FLAGS=versions" | Out-File -Encoding utf8 -Append -FilePath $env:GITHUB_ENV

    - name: Install dependencies using vcpkg
      shell: pwsh
      run: |
        if (Test-Path -Path "${{ env.VCPKG_ROOT }}/vcpkg.exe") {
            & "${{ env.VCPKG_ROOT }}/vcpkg.exe" install --binarysource=clear --binarysource="files,${{ github.workspace }}/vcpkg/binary-cache,readwrite"
        } else {
            & "${{ env.VCPKG_ROOT }}/vcpkg" install --binarysource=clear --binarysource="files,${{ github.workspace }}/vcpkg/binary-cache,readwrite"
        }

    - name: Configure CMake
      shell: pwsh
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    - name: Build
      shell: pwsh
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: pwsh
      run: |
        ctest --build-config ${{ matrix.build_type }}