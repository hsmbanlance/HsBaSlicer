name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Remove existing vcpkg directory if not cached
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        if [ -d "vcpkg" ]; then
          rm -rf vcpkg
        fi

    - name: Bootstrap vcpkg on Windows
      if: matrix.os == 'windows-latest' && steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        Write-Output "Bootstrapping vcpkg on Windows"
        rm -rf vcpkg
        if (Test-Path -Path "vcpkg") {
            Write-Output "vcpkg directory exists"
        } else {
            Write-Output "vcpkg directory does not exist"
            git clone https://github.com/microsoft/vcpkg.git vcpkg
            cd vcpkg
            .\bootstrap-vcpkg.bat -disableMetrics
            .\vcpkg integrate install
        }

    - name: Bootstrap vcpkg on Linux
      if: matrix.os == 'ubuntu-latest' && steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        echo "Bootstrapping vcpkg on Linux"
        rm -rf vcpkg
        sudo apt-get update
        sudo apt-get install -y libx11-dev mesa-common-dev libglu1-mesa-dev libxi-dev libxmu-dev libxmu-headers libncurses-dev libtirpc-dev
        if [ ! -d "vcpkg" ]; then
          git clone https://github.com/microsoft/vcpkg.git vcpkg
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics
          ./vcpkg integrate install
        fi

    - name: Configure CMake
      run: >
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV
        echo "VCPKG_FEATURE_FLAGS=versions" >> $GITHUB_ENV
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    - name: Build
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ctest --build-config ${{ matrix.build_type }}